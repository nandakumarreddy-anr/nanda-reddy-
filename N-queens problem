import matplotlib.pyplot as plt
import numpy as np
def is_safe(board, row, col):
    # Check this row on left side
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, len(board), 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True
def solve_nqueens_util(board, col):
    if col >= len(board):
        return True
    for i in range(len(board)):
        if is_safe(board, i, col):
            board[i][col] = 1
            if solve_nqueens_util(board, col + 1):
                return True
            board[i][col] = 0 
    return False
def solve_nqueens(N):
    board = np.zeros((N, N), dtype=int)
    if not solve_nqueens_util(board, 0):
        print(f"No solution exists for N = {N}")
        return None
    return board
def visualize_nqueens(board):
    N = len(board)
    plt.figure(figsize=(N, N))
    plt.imshow(board, cmap='binary')
    
    for i in range(N):
        for j in range(N):
            if board[i][j] == 1:
                plt.text(j, i, 'Q', ha='center', va='center', fontsize=20, color='red')
    
    plt.xticks([])
    plt.yticks([])
    plt.show()
for N in [4, 5, 8]:
    print(f"Visualizing solution for N = {N}")
    solution = solve_nqueens(N)
    if solution is not None:
        visualize_nqueens(solution)
